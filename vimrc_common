let mapleader = ","
let maplocalleader = ","
"
" Move by screen line instead of logical line
map j gj
map k gk

nnoremap <Esc><Esc> :w<CR>
nnoremap <C-n> :NERDTreeTabsToggle<CR>

" behave Y like D,E,C
nnoremap Y y$

" Enable movement in insert mode
inoremap <C-k> <up>
inoremap <C-j> <down>
inoremap <C-h> <left>
inoremap <C-l> <right>

" Quick way of moving between windows
nnoremap <C-k> <C-W>k
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

nnoremap <silent> <Esc> :let @/=""<CR>
nnoremap  <leader>cd :cd %:p:h<CR>

"special characters display
nnoremap <silent> <leader>h  :call SyntaxToggle()<CR> 
function! SyntaxToggle()
	if exists("g:syntax_on")
		echo "syntax off"
		sleep 500m
		syntax off
	else
		echo "syntax on"
		sleep 500m
	   	syntax enable
	endif
endfunction
		
nnoremap <silent> <leader>j :set wrap! wrap?<CR>
nnoremap <silent> <leader>o :set list! list?<CR>
nnoremap <silent> <leader>p :set hlsearch! hlsearch?<CR>
noremap <silent> <leader>i :set number! number?<CR>


" --- General settings ----------
syntax on
set cindent
set ts=4
set shiftwidth=4
set nocompatible
set ignorecase
set smartcase
set hlsearch
set showcmd
set wildmenu
set wildmode=longest:full,full
set incsearch
set ruler
set showmatch
set matchtime=2
set autowrite
set switchbuf=split,useopen,usetab
set number
set noautochdir
set hidden
set wildignore=*/.git/*,*/.hg/*,*/.svn/*,*.o,tags        " Linux/MacOSX
set lazyredraw
set history=500
set scrolloff=7
set foldmethod=syntax
set nobackup
set noswapfile
set ttymouse=xterm2
set mouse=a
set listchars=tab:>-,eol:<,nbsp:%,trail:.
set backspace=indent,eol,start

let g:xml_syntax_folding=1

" -- Colorschemes
try
	colorscheme sol
catch
	try
		colorscheme mustang
	catch
		try
			colorscheme desert256
		catch
		endtry
	endtry
endtry

if has("autocmd")
    filetype indent on
    filetype plugin indent on

	" Automatically unfold everything when opening a file
	autocmd BufRead * normal zR

	autocmd filetype python setlocal expandtab
	autocmd filetype cs setlocal cindent
endif

if has("gui_running") 
	set guifont=Consolas:h10
	set lines=99999 columns=99999
else
	set t_Co=256
endif

" " Vim scripting
nmap <silent> <leader>sv  :source $MYVIMRC<CR>
nmap <silent> <leader>ev  :e $MYVIMRC<CR>

" General functions
function! GetBufferList()
	redir =>buflist
	silent! ls
	redir END
	return buflist
endfunction

function! ToggleList(bufname, pfx)
	let buflist = GetBufferList()
	for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
		if bufwinnr(bufnum) != -1
			exec(a:pfx.'close')
			return
		endif
	endfor
	if a:pfx == 'l' && len(getloclist(0)) == 0
		echohl ErrorMsg
		echo "Location List is Empty."
		return
	endif
	let winnr = winnr()

	exec('botright '.a:pfx.'open')
	if winnr() != winnr
		wincmd p
	endif
endfunction

map <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
map <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>

" Binary editing
let b:binary=0
function! BinaryEdit()
	try
		if !exists('b:binary')
			let b:binary = 0
		endif
		if b:binary == 1
			exec("%!xxd -r")
			echo "Text editing the buffer"
			let b:binary=0
		else
			exec("%!xxd")
			echo "Binary editing the buffer"
			let b:binary=1
		endif
	catch
		echo "Failed to edit binary or text file: " v:exception
	endtry
endfunction()

nnoremap <leader>bin :call BinaryEdit()<CR>
